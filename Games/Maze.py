from ASimulator import Simulator
import numpy as np
from numpy.random import choice, seed
import Paramter


class Maze(Simulator):
    NUMActions = 5
    NUMObservations = 6
    NUMRewards = 3
    NUMStates = 11
    Rewards = dict()
    Rewards[0] = -0.04
    Rewards[1] = 10.0
    Rewards[2] = -100.0
    Actions = ["Move-north", "Move-south", "Move-east", "Move-west", "Reset"]
    Observations = ["left", "right", "neither", "both", "good", "bad"]
    States = ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10"]
    StatesID = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
    ObservationsID = [0, 1, 2, 3, 4, 5]
    Belief = [0.111111, 0.111111, 0.111111, 0.0, 0.111111, 0.111111, 0.0, 0.111112, 0.111111, 0.111111, 0.111111]
    Move_North = np.array([[0.9, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                           [0.1, 0.8, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                           [0.0, 0.1, 0.8, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                           [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                           [0.8, 0.0, 0.0, 0.0, 0.2, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                           [0.0, 0.0, 0.8, 0.0, 0.0, 0.1, 0.1, 0.0, 0.0, 0.0, 0.0],
                           [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0],
                           [0.0, 0.0, 0.0, 0.0, 0.8, 0.0, 0.0, 0.1, 0.1, 0.0, 0.0],
                           [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.8, 0.1, 0.0],
                           [0.0, 0.0, 0.0, 0.0, 0.0, 0.8, 0.0, 0.0, 0.1, 0.0, 0.1],
                           [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.8, 0.0, 0.0, 0.1, 0.1]])

    Move_South = np.array([[0.1, 0.1, 0.0, 0.0, 0.8, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                           [0.1, 0.8, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                           [0.0, 0.1, 0.0, 0.1, 0.0, 0.8, 0.0, 0.0, 0.0, 0.0, 0.0],
                           [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                           [0.0, 0.0, 0.0, 0.0, 0.2, 0.0, 0.0, 0.8, 0.0, 0.0, 0.0],
                           [0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.1, 0.0, 0.0, 0.8, 0.0],
                           [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0],
                           [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.9, 0.1, 0.0, 0.0],
                           [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.8, 0.1, 0.0],
                           [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.8, 0.1],
                           [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.9]])

    Move_East = np.array([[0.1, 0.8, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                          [0.0, 0.2, 0.8, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                          [0.0, 0.0, 0.1, 0.8, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0],
                          [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                          [0.1, 0.0, 0.0, 0.0, 0.8, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0],
                          [0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.8, 0.0, 0.0, 0.1, 0.0],
                          [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0],
                          [0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.1, 0.8, 0.0, 0.0],
                          [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.2, 0.8, 0.0],
                          [0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.1, 0.8],
                          [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.9]])

    Move_West = np.array([[0.9, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                          [0.8, 0.2, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                          [0.0, 0.8, 0.1, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0],
                          [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                          [0.1, 0.0, 0.0, 0.0, 0.8, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0],
                          [0.0, 0.0, 0.1, 0.0, 0.0, 0.8, 0.0, 0.0, 0.0, 0.1, 0.0],
                          [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0],
                          [0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.9, 0.0, 0.0, 0.0],
                          [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.8, 0.2, 0.0, 0.0],
                          [0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.8, 0.1, 0.0],
                          [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.8, 0.1]])

    l = np.array([[1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                  [0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                  [0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                  [0.111111, 0.111111, 0.111111, 0.0, 0.111111, 0.111111, 0.0, 0.111112, 0.111111, 0.111111, 0.111111],
                  [0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                  [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                  [0.111111, 0.111111, 0.111111, 0.0, 0.111111, 0.111111, 0.0, 0.111112, 0.111111, 0.111111, 0.111111],
                  [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0],
                  [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0],
                  [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0],
                  [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0]])
    TMats = dict()
    TMats[0] = Move_North
    TMats[1] = Move_South
    TMats[2] = Move_East
    TMats[3] = Move_West
    TMats[4] = l

    Ob = np.array([[1.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                   [0.0, 0.0, 1.0, 0.0, 0.0, 0.0],
                   [0.0, 0.0, 1.0, 0.0, 0.0, 0.0],
                   [0.0, 0.0, 0.0, 0.0, 1.0, 0.0],
                   [0.0, 0.0, 0.0, 1.0, 0.0, 0.0],
                   [1.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                   [0.0, 0.0, 0.0, 0.0, 0.0, 1.0],
                   [1.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                   [0.0, 0.0, 1.0, 0.0, 0.0, 0.0],
                   [0.0, 0.0, 1.0, 0.0, 0.0, 0.0],
                   [0.0, 1.0, 0.0, 0.0, 0.0, 0.0]])

    Reset = np.array([[0.25, 0.25, 0.25, 0.25, 0.0, 0.0],
                      [0.25, 0.25, 0.25, 0.25, 0.0, 0.0],
                      [0.25, 0.25, 0.25, 0.25, 0.0, 0.0],
                      [0.25, 0.25, 0.25, 0.25, 0.0, 0.0],
                      [0.25, 0.25, 0.25, 0.25, 0.0, 0.0],
                      [0.25, 0.25, 0.25, 0.25, 0.0, 0.0],
                      [0.25, 0.25, 0.25, 0.25, 0.0, 0.0],
                      [0.25, 0.25, 0.25, 0.25, 0.0, 0.0],
                      [0.25, 0.25, 0.25, 0.25, 0.0, 0.0],
                      [0.25, 0.25, 0.25, 0.25, 0.0, 0.0],
                      [0.25, 0.25, 0.25, 0.25, 0.0, 0.0]])
    OMats = dict()
    OMats[0] = Ob
    OMats[1] = Reset

    R1 = [-0.04, -0.04, -0.04, -0.04, -0.04, -0.04, -0.04, -0.04, -0.04, -0.04, -0.04]
    R2 = [-0.04, -0.04, -0.04, 10.0, -0.04, -0.04, -100.0, -0.04, -0.04, -0.04, -0.04]
    RMats = dict()
    RMats[0] = R1
    RMats[1] = R2

    def Clone(self):
        return Maze()

    def getRewardDict(self):
        return Maze.Rewards

    def getNumActions(self):
        return Maze.NUMActions

    def getNumObservations(self):
        return Maze.NUMObservations

    def getNumRewards(self):
        return Maze.NUMRewards

    def __init__(self):
        super().__init__()
        self.reward = None
        self.observation = None
        self.agent = None
        self.actionCount = 0
        self.terminate = False

    def InitRun(self):
        # seed(seedint)
        self.agent = choice(a=Maze.StatesID, p=Maze.Belief, size=1)[0]
        self.actionCount = 0
        self.terminate = False


    def getGameName(self):
        return "Maze"

    def executeAction(self, aid):
        TMats = Maze.TMats[aid]
        if aid != 4:
            OMats = Maze.OMats[0]
            RMats = Maze.RMats[0]
        else:
            OMats = Maze.OMats[1]
            RMats = Maze.RMats[1]
        # Taking Reward
        self.reward = RMats[self.agent]
        # Taking Transition
        ps = TMats[self.agent]
        newAgent = choice(a=Maze.StatesID, p=list(ps), size=1)[0]
        self.agent = newAgent
        # Taking Observation
        os = OMats[self.agent]
        self.observation = choice(a=Maze.ObservationsID, p=list(os), size=1)[0]
        self.actionCount = self.actionCount + 1
        if self.actionCount >= Paramter.LengthOfAction:
            self.terminate = True

    def getObservation(self):
        o = self.observation
        self.observation = None
        if o is None:
            Exception("Maze doesn't generate new observation!")
        return o

    def getReward(self):
        r = self.reward
        self.reward = None
        if r is None:
            Exception("Maze doesn't generate new reward!")
        return r

    def isTerminate(self):
        return self.terminate
